{"meta":{"title":"Mamba's Blog","subtitle":"技术改变生活","description":"I do what I do.—Kobe Bryant","author":"秃头东","url":"https://github.com/Mamba243/Mamba243.github.io.git","root":"/"},"pages":[{"title":"categories","date":"2020-03-16T03:07:37.000Z","updated":"2020-03-16T12:19:28.662Z","comments":true,"path":"categories/index.html","permalink":"https://github.com/Mamba243/Mamba243.github.io.git/categories/index.html","excerpt":"","text":""},{"title":"sitemap","date":"2020-03-16T03:08:17.000Z","updated":"2020-03-16T03:08:17.610Z","comments":true,"path":"sitemap/index.html","permalink":"https://github.com/Mamba243/Mamba243.github.io.git/sitemap/index.html","excerpt":"","text":""},{"title":"关于","date":"2020-03-16T03:07:13.000Z","updated":"2020-03-16T11:22:58.627Z","comments":true,"path":"about/index.html","permalink":"https://github.com/Mamba243/Mamba243.github.io.git/about/index.html","excerpt":"","text":"关于我 科密 关于本站 自我记录"},{"title":"2020年历","date":"2020-03-16T03:07:56.000Z","updated":"2020-03-16T13:13:30.259Z","comments":true,"path":"schedule/index.html","permalink":"https://github.com/Mamba243/Mamba243.github.io.git/schedule/index.html","excerpt":"","text":""},{"title":"标签","date":"2020-03-16T03:06:11.000Z","updated":"2020-03-16T12:18:19.614Z","comments":true,"path":"tags/index.html","permalink":"https://github.com/Mamba243/Mamba243.github.io.git/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"3月Python笔记","slug":"Pythonnote","date":"2020-03-16T13:48:17.694Z","updated":"2020-03-16T13:48:17.694Z","comments":true,"path":"2020/03/16/Pythonnote/","link":"","permalink":"https://github.com/Mamba243/Mamba243.github.io.git/2020/03/16/Pythonnote/","excerpt":"3月python笔记1. 计算数据时，必须是数字类型的才可以计算1234567print(\"==========买苹果计算器============\")mon=input(\"请输入单价\")weight= input(\"请输入重量\")M = float(mon)W = float(weight)total = M*Wprint(total) 在这里面 如果没有将mon和weight转换为MW的话 将无法计算 可以转换为int float double 啥的2. 变量的格式化输出 %叫做格式化操作符 如果希望输出文字信息的同时，一起输出数据，就要用到格式化操作12name = \"小明\"print(\"我的名字叫%s，请多多关照\" %name) 运行结果为： “我的名字是小明，请多多关照”12num = 1print(\"我的学号是%06d\" %num) 这样输出的话 会自动补充为6位数 为000001 06d% 的作用是 如果不到6位 就自动补充0 到6位 如果超过6位就直接完全显示出来1234name = \"科比\"year = 41height = 198.8print(\"我叫%s，今年%d岁，身高%.2f\" %(name,year,height)) 这里有两个知识点 一是当你有许多个数据要格式化输出时，就可以通过%（，，）一次性输出来 然后呢 %.2的意思就是保留两位小数的意思 这个和%06d类似 12scale = 0.25print(\"数据比例是 %。2f%\" %(scale*100)) 百分号百分之几可以通过（( ······ )*100）表示","text":"3月python笔记1. 计算数据时，必须是数字类型的才可以计算1234567print(\"==========买苹果计算器============\")mon=input(\"请输入单价\")weight= input(\"请输入重量\")M = float(mon)W = float(weight)total = M*Wprint(total) 在这里面 如果没有将mon和weight转换为MW的话 将无法计算 可以转换为int float double 啥的2. 变量的格式化输出 %叫做格式化操作符 如果希望输出文字信息的同时，一起输出数据，就要用到格式化操作12name = \"小明\"print(\"我的名字叫%s，请多多关照\" %name) 运行结果为： “我的名字是小明，请多多关照”12num = 1print(\"我的学号是%06d\" %num) 这样输出的话 会自动补充为6位数 为000001 06d% 的作用是 如果不到6位 就自动补充0 到6位 如果超过6位就直接完全显示出来1234name = \"科比\"year = 41height = 198.8print(\"我叫%s，今年%d岁，身高%.2f\" %(name,year,height)) 这里有两个知识点 一是当你有许多个数据要格式化输出时，就可以通过%（，，）一次性输出来 然后呢 %.2的意思就是保留两位小数的意思 这个和%06d类似 12scale = 0.25print(\"数据比例是 %。2f%\" %(scale*100)) 百分号百分之几可以通过（( ······ )*100）表示 3.如何查找python关键词 在python中输入以下代码12import keywordprint(keyword.kwlist) 4.python的变量 命名规范 取名字时 如何有两个单词或者多个单词 需要用_连接，所有的单词都用小写字母写 其他语言会用小驼峰式和大驼峰式的写法 但是python不是这样的规范 例如： firstName(小驼峰式)： 第一个单词以小写字母开头，后续的单词用大写字母开头 FirstName（大峰式): 每一个单词的首字母都采用大写字母口头 5.代码的缩进用1个tab 或者4个空格 （建议空格） 在写代码的时候Tab 和空格不要混用！ 6.在进行运算符判断时，用input的一定要将str转为数字符int float double7. if 后面的语句需要为true时才会执行 例如 123employee = Trueif not employee : print(\"非本公司人员，请勿入内\") 此时不会输出话 123employee = Falseif not employee : print(\"非本公司人员，请勿入内\") 此时会输出话，反正就是看结果是对还是错，是对的话，if就会输出来 8. if elif if elif相当于java的 if case 当希望if完之后还有更多不同的条件，而不是只有一个else时，就可以用elif语句* 123456789holiday_name = \"生日\"if holiday_name == \"情人节\": print(\"买玫瑰\")elif holiday_name ==\"生日\": print(\"买蛋糕\")elif holiday_name==\"中秋节\": print(\"吃月饼\")else: print(\"每天都是节日啦\") 9.if的嵌套123456789has_ticket = Trueknife_length = 20if has_ticket: if knife_length&gt;=20: print(\"请勿携带大刀\") else: print(\"欢迎乘坐\")else: print(\"买票狗贼\") 10.石头剪刀布的思考12345678910111213import randoma=random.randint(1,3)b=int(input(\"请输入你要出的拳（1）剪刀 （2）石头 （3）布\"))print(\"电脑出的是\",a)if ((a==1 and b==3) or(a==2 and b==1) or(a==3 and b==2)): print(\"电脑胜利！\"）elif(a==b): print(\"和局\")else: print(\"玩家胜利\") 首先是random的调用 random是随机用法，有时候如果我们需要一些随机结果，可以调用random，具体代码就是 import random，随机数是random.randInt(括号里面是随机数的范围) 如果条件判断的句子太长，可以在总的条件加（），再分开来输入 if（a==1，b==2）和 if（a==1 and b ==2）有什么区别？ 逗号是或的意思，and是和的意思！！！！ 11 python中没有自加自减 只可以i=i+1 或者可以用i+=1 12 循环求和的思考首先需要来一个从1到2到3······的数据串然后再创建一个储存结果的变量result 让它来计算从1加到100 123456i =0result = 0 while 1 &lt;=100: i=i+1 result = result + i print(result) 如果想要得到的是偶数项的求和，可以加上一个 if i%2==0,（也就是能被2整除的意思） 13 break 和 continue 的区别 总的来说可以理解为 break是退出了 整个循环 continue是跳过某一步而已 在用continue时需要看清楚计数是否更改，否则可能会陷入反复跳跃的尴尬循环 1234567i = 0 while i&lt;3: if i ==3: i+=1 continue print(i) i+=1 14 如果不希望在输出的末尾增加换行 可以添加end =12print(\"n\",end = )print(\"n\") 那么输出的结果会是nn 12print(\"n\",end =\"----\" )print(\"n\") 那么输出的结果会是n—n 15循环的嵌套12345678i = 1while i &lt;= 5: j = 1 while j&lt;=i: print(\"*\",end=\"\") j = j+1 print(\"\") i = i+1 循环的嵌套 总的来说是比较复杂的，但是我们可以这么想，首先我们都知道先要考虑每一行，你单个循环的话，就只有一层，只有一排竖着的*，这个得先实现出来。 其次呢，我们要考虑到，每一行其实不是只有一个 ，所以就要在第一个循环还没出去前在添加一个循环，这个循环就是为了打完整这一行的*，所以我们就可以找一找每一排其实是什么规律，噢，我哦们发现，其实每一行的个数，正好是那一行的行数，第一行一个，第二行就2个。 16 相对应的九九乘法表12345678i = 1while i &lt;=9 : j=1 while j&lt;=i: print(\"%d*%d=%d\" % (j,i,i*j),end=\"\\t\") j+=1 print(\"\") i+=1 也是一个简单的循环嵌套而已其实，仔细看看，就是把输出的东西变成变量就好了，所以其实并不是很难啦 除此之外，还有就是很好的体现出了格式化输出的作用，这里有一个很好的格式化输出 转义字符的作用转义字符的作用很大，比如这里，如果我们让他们用转义制表符结尾，就会对齐，效果会好很多 17 定义函数12def Hello_World(): print(\"Hello World\") 这就是函数的定义 注意def 还要注意：和（） 定义了函数不代表调用了函数 给函数添加备注：添加“““三个引号 18 在python中 函数的调用不能放在函数定义的上方 因为python是解释性语言，是从上向下执行，因此必须要先定义函数再调用 19 python中 py结尾的python源代码文件都是模块 模块好比工具包，如果要用到这个工具包， 就要import这个工具包 模块中的定义的全局变量、函数都是模块能够提供给外界直接使用的工具 模块名不可以用数字开头，如果数字开头则没办法导入 20 python数据类型回顾 数字型字符 int 整型 float 浮点型 bool 布尔型 complex 复数型 非数字型字符串列表元组字典 非数字型变量都有以下的特点： 都是一个序列，可以理解为容器 取值[ ] 遍历for in 可以计算长度、最值、比较、删除 切片 21 列表 列表在别的语言中叫做数组,是专门用来储存一串信息的 列表用[]定义，数据之间使用，间隔 列表的索引从0开始 输入列表的名称.再按tab键可以查看列表的方法有哪些 记得看清楚删除del的和pop的区别，del是在前面，没有. 用[]pop是写在后面，有. 用的 是（） python列表可以放不同类型的数据，但是一般都是放同一类型的数据，然后用迭代遍历 22 迭代遍历 1234namelist = [\"张三\",\"李四\",\"王五\"]for myname in namelist: print(\"我的名字叫%s\" % myname) 顺序的从namelist列表中获取数据，每一次循环，数据都保存在myname 元组 元组和列表很相似，但是元组不可修改 元组是用（）的，列表是用[ ] 列表变量可以进行增删改插，元组不可以 实际开发中，元组有特定的使用场景，一般元组用来储存不变的数据，可以有不同的数据类型，列表一般使用相同的数据类型 元组和列表一样都是从索引0开始的 元组只有一个元素时，也要在元素后面添加，号 取元组的索引值： 12info_tuple(\"zhangshan\",\"1.65\",\"18\")print(info_tuple.index(\"zhangshan\")) 结果就会显示： 0 统计出现次数 12print(info_tuple.count(\"zhangshan\")) //统计出现几个zhangshanprint(len(info_tuple)) //统计这个元组或者列表一共有多少个元素 元组的使用场景 格式化字符串%（）其实就是一个元组来的1print(%年龄是%d身高是%.2f %(\"小明\"，18,1.65)) 所以也可以这样处理*：12info_tuple = (\"小明\"，18,1.65)print(%年龄是%d身高是%.2f %info_tuple) 列表和元组之间的相互转换list（元组）tuple(列表) 字典 字典是除列表之外的最灵活的数据类型 字典同样可以用来储存多个数据 通常用来储蓄一个物体的相关数据 字典和列表的区别 字典是无序的对象集合 列表是有序的对象集合 字典用{ } 123456//定义一个小明字典小明&#123;\"name\":\"小明\", \"age\":18, \"gender\":True &#125; print(xiaoming) 字典最常用的场景就是这样 字典的一些常用操作： 迭代遍历字典 迭代遍历含有字典的列表 字符串常用的方法 is开头的都是判断类型 查找类型 大小写转换（主要针对英文） 文本对齐类 去除空白字符 拆分和连接 python中的共同方法 pass关键字的作用 如果在编写程序时，不希望立刻编写分支里面的内容，可以用pass占位，保证程序正常进行 当希望代码无限循环时，可以使用 while True：加在最前面 对比一下 两种不同的方法，一样的效果，学会了列表之后，就应该这么用，这样才能体现python代码的简洁 注释代码前可以添加 TODO ，这样可以备注任务是分配给谁做的 批量重命名 shift + F6 或者鼠标右键 重构 重命名","categories":[{"name":"3月笔记","slug":"3月笔记","permalink":"https://github.com/Mamba243/Mamba243.github.io.git/categories/3%E6%9C%88%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://github.com/Mamba243/Mamba243.github.io.git/tags/Python/"}]},{"title":"3月Java笔记","slug":"Javanote","date":"2020-03-16T13:45:28.125Z","updated":"2020-03-16T13:45:28.126Z","comments":true,"path":"2020/03/16/Javanote/","link":"","permalink":"https://github.com/Mamba243/Mamba243.github.io.git/2020/03/16/Javanote/","excerpt":"3月java 笔记什么是类 类是一组相关属性和行为的组合，可以看成事一类事物的模板 属性： 就是该类事物的一些信息 行为： 就是该类事物能够做什么 例如：* 小猫： 属性： 名字 体重 性别 年龄 行为：跑 跳 爬 叫 什么是对象 对象是一类事物的具体体现，是类的一个实例，必然具备该类的属性和行为 例如：* 具体的一只小猫 类和对象的具体关系： 类是抽象的，对象是具体的 类是对象的模板，对象是类的一个具体实例 如何定义一个类 属性（也就是成员变量）： String name； int age； 行为（也就是成员方法）： public void eat( );{} public void sleep( );{}","text":"3月java 笔记什么是类 类是一组相关属性和行为的组合，可以看成事一类事物的模板 属性： 就是该类事物的一些信息 行为： 就是该类事物能够做什么 例如：* 小猫： 属性： 名字 体重 性别 年龄 行为：跑 跳 爬 叫 什么是对象 对象是一类事物的具体体现，是类的一个实例，必然具备该类的属性和行为 例如：* 具体的一只小猫 类和对象的具体关系： 类是抽象的，对象是具体的 类是对象的模板，对象是类的一个具体实例 如何定义一个类 属性（也就是成员变量）： String name； int age； 行为（也就是成员方法）： public void eat( );{} public void sleep( );{} 12345678910111213141516public class Student &#123;// 先写成员变量 String name; //成员变量 姓名 int age; //成员变量 年龄//写成员方法 public void eat() &#123; System.out.println(\"吃饭饭！\"); &#125; public void sleep() &#123; System.out.println(\"睡觉觉！\"); &#125; public void study() &#123; System.out.println(\"学习习！\"); &#125; &#125; 成员变量直接定义在类当中的，在方法外的 成员方法不要写 static 关键字 通常情况下，一个类不能直接使用，需要创建一个类的对象，才能使用 需要经历1 导包 2 创建 3 使用 1234567891011121314151617181920212223242526package demoStudent;import demoStudent.Student;/*1 导包:也就是指出需要用到的类在什么位置对于和当前类是在同一个包下面的,可以不导包2 创建,格式:类名称 对象名 = new 类名称 ( );3 使用 分为两种情况使用成员变量: 对象名.成员变量名使用成员方法: 对象名.成员方法名(参数)（想用谁，就用对象名.谁）注意：如果成员变量没有进行赋值，那么将会有一个默认值，规则和数组一样*/public class demostudent1 &#123; public static void main(String[] args) &#123; Student stu = new Student(); stu.name = \"kobe\"; stu.age = 41; System.out.println(stu.name); System.out.println(stu.age); System.out.println(\"===============\"); stu.eat(); &#125;&#125; 有参数的成员方法如下：12public void call(String who) &#123;&#125; System.out.println(\"正在呼叫\"+who);&#125; 使用方法则是:12phone.call(\"kobe\");//在框中填写参数 一个对象的内存示意图！！ 一开始是所有的方法进入方法区 最先进栈的是main方法 new的东西会在堆中拿出一块空间进行 值得一提的是new的成员方法不是直接在堆中，只是传递了方法区里面的成员方法地址而已 当有新的方法调用时，栈中就会多一个方法执行，每次都是往上加 当方法执行结束时就会出栈这部分知识特别重要，需要自己多次理解，不要囫囵吞枣，反复修改表达 方法的相关知识(薄弱） 什么是方法？方法其实就是若干语句的功能集合。方法好比一个工厂，方法需要传入参数返回返回值。这里的参数就相当于原材料，返回值就相当于产出物。 方法定义的完整格式：1234修饰符 返回值类型 方法名称 （参数类型 参数名,参数类型 参数名...）&#123; 方法体 return 返回值；&#125; 修饰符 public static 现阶段的固定写法 return 一是终止方法 二是把返回值还给调用处 return 后面的返回值必须和方法名称前面的返回值类型一致 方法调用的三种方式 单独调用：方法名称（参数）; 打印调用system.out.println((方法名称（参数）))； 赋值调用 数据类型 变量名称 = 方法名称（参数） 返回值为void是只能用单独调用！！void表示无返回值，没有return 所以用void 方法的参数 方法有参数，当一个方法需要数据条件才能完成任务时，就是有参数的。 无参数 小括号留空，一个方法不需要数据，自己能独立完成 例如打印十次hello world的方法 只要一调用就会固定打印十次，没有参数 对比有返回值和无返回值的区别 实例，判断2个数是否相等的方法 注意事项： 方法必须定义在类当中，不能在main方法中再定义方法 方法定义顺序无所谓 方法定义后不会执行的，需要调用 如果有返回值 需要写return 返回值 没有返回值的类型是 void 可以不写return；非要写的话也就只能写return （结束方法的意思）不能再加别的东西 return后面的类型要和方法名前的类型一致 一个方法中可以有多个return，但是要确保只要一个能被执行到，例如： 方法重载 多个方法的名称一样，但是参数列表不一样有对的上的就执行，对不上的就报错 注意事项： 方法重载就是参数列表的问题，有什么情况下是属于参数列表不一样的？ 参数的个数不同 参数的类型不同 参数的多类型顺序不同 有什么情况是不算重载的呢？ 与参数的顺序无关 a+b /b+a 与参数的返回值类型无关 println其实就是一个重载，他不用管你print的是啥，全部包了，其实是个重载的方法 java中批量修改名字用shift+F6private 修饰的，只有本类可以访问，超出本类范围的就不能访问。通过谁调用的方法，谁就是this构造方法 构造方法用来创建对象，当用new来创建时候就是调用构造方法 格式：public 类名称（类名称类型 参数名称）{ 方法体 } 注意事项1 构造方法的名称必须和所在类的名称完全一样","categories":[{"name":"3月笔记","slug":"3月笔记","permalink":"https://github.com/Mamba243/Mamba243.github.io.git/categories/3%E6%9C%88%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"java","slug":"java","permalink":"https://github.com/Mamba243/Mamba243.github.io.git/tags/java/"}]},{"title":"First Blog","slug":"firstblog","date":"2020-03-16T10:53:01.083Z","updated":"2020-03-16T10:53:01.084Z","comments":true,"path":"2020/03/16/firstblog/","link":"","permalink":"https://github.com/Mamba243/Mamba243.github.io.git/2020/03/16/firstblog/","excerpt":"","text":"Dear Kobe: 科比说过:”你见过凌晨4点的洛杉矶吗？”","categories":[{"name":"Life","slug":"Life","permalink":"https://github.com/Mamba243/Mamba243.github.io.git/categories/Life/"}],"tags":[{"name":"Kobe","slug":"Kobe","permalink":"https://github.com/Mamba243/Mamba243.github.io.git/tags/Kobe/"}]},{"title":"Hello World","slug":"hello-world","date":"2020-03-15T16:15:57.206Z","updated":"2020-03-15T16:15:57.206Z","comments":true,"path":"2020/03/16/hello-world/","link":"","permalink":"https://github.com/Mamba243/Mamba243.github.io.git/2020/03/16/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}